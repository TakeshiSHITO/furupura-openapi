/shops/{shopId}/products:
  get:
    tags: [admin-products]
    summary: ショップの商品一覧（管理者）
    description: 指定したショップに紐づく商品一覧を取得します。最終更新日の新しい順で返却。
    operationId: getShopProductsByAdmin
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: shopId
        required: true
        schema:
          type: string
        description: 対象ショップのID
      - in: query
        name: status
        required: false
        schema:
          type: string
          description: 商品の公開状態フィルタ
          enum: [draft, active, inactive, archived] # 実装値に合わせて調整
      - in: query
        name: pageNumber
        required: false
        schema:
          type: integer
          minimum: 1
          default: 1
        description: ページ番号（1始まり）
      # 実装では固定でも、将来的に可変にする場合は有効化
      # - in: query
      #   name: pageSize
      #   required: false
      #   schema:
      #     type: integer
      #     minimum: 1
      #     maximum: 200
      #     default: 45
      #   description: 1ページあたり件数
    responses:
      '200':
        description: 取得成功
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetShopProductsResponse'
            examples:
              ok:
                value:
                  products:
                    - id: 'p_123'
                      name: 'ヴィンテージデニムジャケット'
                      categoryId: 'cat_01'
                      categoryName: 'アウター'
                      price: 12000
                      image: 'https://cdn.example.com/p/p_123.jpg'
                      status: 'active'
                      shopName: 'FURUPURA 下北沢店'
                      updatedAt: '2025-08-20T12:34:56.000Z'
                    - id: 'p_456'
                      name: 'レトロワンピース'
                      categoryId: 'cat_02'
                      categoryName: 'ワンピース'
                      price: 9800
                      image: 'https://cdn.example.com/p/p_456.jpg'
                      status: 'draft'
                      shopName: 'FURUPURA 下北沢店'
                      updatedAt: '2025-08-19T08:10:00.000Z'
                  meta:
                    count: 123
                    currentPage: 1
                    pages: 3
                    pageSize: 45
      '400':
        description: パラメータ不備（例：shopId 未指定）
        content:
          application/json:
            schema:
              $ref: '../../../shared/responses/common.yaml#/components/schemas/Error'
            examples:
              noShopId:
                value:
                  message: 'Shop ID is required'
      '401':
        $ref: '../../../shared/responses/common.yaml#/components/responses/Unauthorized'
      '404':
        description: ショップが存在しない、または権限なし
        content:
          application/json:
            schema:
              $ref: '../../../shared/responses/common.yaml#/components/schemas/Error'
      '500':
        description: サーバーエラー
        content:
          application/json:
            schema:
              $ref: '../../../shared/responses/common.yaml#/components/schemas/Error'
            examples:
              serverErr:
                value:
                  message: '商品の取得中にエラーが発生しました。何度か試してみてもエラーが解消されない場合、サポートにお問い合わせください。'
  post:
    tags: [admin-products]
    summary: ショップに商品を一括作成（管理者）
    description: |
      指定されたショップにサンプル商品をまとめて作成します。  
      `count` が指定されない場合は 1 件作成されます。
    operationId: createProductsByAdmin
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: shopId
        required: true
        schema:
          type: string
        description: 商品を作成する対象ショップのID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateProductsRequest'
          examples:
            single:
              summary: 1件の商品作成
              value:
                count: 1
            multiple:
              summary: 複数件の商品作成
              value:
                count: 10
    responses:
      '201':
        description: 作成成功
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
              example:
                message: '10件の商品が作成されました'
      '400':
        description: リクエスト不正
        content:
          application/json:
            schema:
              $ref: '../../../shared/responses/common.yaml#/components/schemas/Error'
          examples:
            invalidCount:
              value:
                message: '商品数は1以上で指定してください。'
      '404':
        description: ショップが存在しない
        content:
          application/json:
            schema:
              $ref: '../../../shared/responses/common.yaml#/components/schemas/Error'
          examples:
            notFound:
              value:
                message: '店舗が見つかりません。'
      '401':
        $ref: '../../../shared/responses/common.yaml#/components/responses/Unauthorized'
      '500':
        description: サーバーエラー
        content:
          application/json:
            schema:
              $ref: '../../../shared/responses/common.yaml#/components/schemas/Error'

products/{productId}/tags:
  post:
    tags: [admin-products]
    summary: 商品にタグを追加（管理者）
    description: |
      指定した商品にタグを追加します。重複は無視され、上限数を超える場合は追加できません。
      成功時は、商品に紐づく全てのタグ一覧を返します。
    operationId: addTagsToProduct
    security:
      - bearerAuth: []
    parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: string
        description: タグを追加する対象商品のID
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddProductTagsRequest'
          examples:
            addSomeTags:
              value:
                tagIds: [101, 102, 205]
    responses:
      '200':
        description: 追加成功（商品に紐づく全タグ一覧を返却）
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProductTagsResponse'
            examples:
              ok:
                value:
                  message: 'タグが商品に追加されました'
                  tags:
                    - id: 101
                      name: 'ヴィンテージ'
                    - id: 205
                      name: '90s'
                    - id: 102
                      name: 'デニム'
      '400':
        description: リクエスト不正またはタグ上限超過
        content:
          application/json:
            schema:
              $ref: '../../../shared/responses/common.yaml#/components/schemas/Error'
            examples:
              emptyBody:
                value:
                  message: 'タグを追加できませんでした。何度もエラーが起こる場合は、サポートにお問い合わせください'
              overLimit:
                value:
                  message: '一つの商品に追加できるタグは{TAG_LIMIT}つまでです'
      '401':
        $ref: '../../../shared/responses/common.yaml#/components/responses/Unauthorized'
      '404':
        description: 商品が存在しない（実装で検知する場合）
        content:
          application/json:
            schema:
              $ref: '../../../shared/responses/common.yaml#/components/schemas/Error'
            examples:
              notFound:
                value:
                  message: '商品が見つかりません。'
      '500':
        description: サーバーエラー
        content:
          application/json:
            schema:
              $ref: '../../../shared/responses/common.yaml#/components/schemas/Error'
            examples:
              serverErr:
                value:
                  message: '商品にタグを追加できませんでした。何度もエラーが起こる場合は、サポートにお問い合わせください'
