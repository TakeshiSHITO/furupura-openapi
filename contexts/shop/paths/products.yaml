/products:
  post:
    tags:
      - products
    summary: 商品登録
    description: 新しい商品を登録します。指定した数だけサンプル商品を一括作成できます。
    operationId: createProduct
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: integer
                minimum: 1
                description: 作成する商品数
                example: 1
            required: [count]
    responses:
      '201':
        description: 商品作成成功
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '1件の商品が作成されました'
              required: [message]
      '400':
        description: バリデーションエラー
        $ref: '../../../shared/responses/common.yaml#/components/responses/BadRequest'
      '401':
        $ref: '../../../shared/responses/common.yaml#/components/responses/Unauthorized'
      '404':
        description: 店舗が見つかりません
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '店舗が見つかりません。'
      '500':
        description: サーバーエラー
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: エラーメッセージ/common.yaml#/components/responses/Unauthorized'

# --- SKUごとの利用可能数確認 ---

/products/{productId}/inventory:
  get:
    tags:
      - inventory # 在庫管理タグ
    summary: SKUごとの在庫状況確認
    description: 商品IDを指定して、その商品に紐づくSKUごとの**利用可能在庫数**を確認します。
    operationId: getProductInventory
    parameters:
      - name: productId
        in: path
        required: true
        description: 商品ID
        schema:
          type: string
    responses:
      '200':
        description: 在庫状況一覧
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '../schemas/inventory.yaml#/components/schemas/SkuInventoryStatus'
      '404':
        $ref: '../../../shared/responses/common.yaml#/components/responses/NotFound'

/products/{productId}/tags:
  post:
    tags:
      - products
    summary: 商品にタグを追加
    description: 指定した商品にタグを追加します。一つの商品に追加できるタグには上限があります。
    operationId: addTagsToProduct
    parameters:
      - name: productId
        in: path
        required: true
        description: 商品ID
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              tagIds:
                type: array
                items:
                  type: integer
                description: 追加するタグIDのリスト
                minItems: 1
                example: [1, 2, 3]
            required: [tagIds]
    responses:
      '200':
        description: タグ追加成功
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 'タグが商品に追加されました'
                tags:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: タグID
                      name:
                        type: string
                        description: タグ名
                    required: [id, name]
                  description: 商品に登録されているすべてのタグ
              required: [message, tags]
      '400':
        description: バリデーションエラーまたはタグ上限エラー
        content:
          application/json:
            schema:
              oneOf:
                - type: string
                  example: 'タグを追加できませんでした。何度もエラーが起こる場合は、サポートにお問い合わせください'
                - type: object
                  properties:
                    message:
                      type: string
                      example: '一つの商品に追加できるタグは10つまでです'
      '500':
        description: サーバーエラー
        content:
          application/json:
            schema:
              type: string
              example: '商品にタグを追加できませんでした。何度もエラーが起こる場合は、サポートにお問い合わせください'

  delete:
    tags:
      - products
    summary: 商品からタグを削除
    description: 指定した商品から指定したタグを削除します。
    operationId: removeTagsFromProduct
    parameters:
      - name: productId
        in: path
        required: true
        description: 商品ID
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              tagIds:
                type: array
                items:
                  type: integer
                description: 削除するタグIDのリスト
                minItems: 1
                example: [1, 2, 3]
            required: [tagIds]
    responses:
      '200':
        description: タグ削除成功
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '商品からタグを削除しました'
                tags:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: タグID
                      name:
                        type: string
                        description: タグ名
                    required: [id, name]
                  description: 商品に残っているすべてのタグ
              required: [message, tags]
      '400':
        description: バリデーションエラー
        content:
          application/json:
            schema:
              type: string
              example: 'Tags should be a non-empty array of IDs'
      '500':
        description: サーバーエラー
        content:
          application/json:
            schema:
              type: string
              example: '商品からタグを削除できませんでした'

/products/{productId}:
  get:
    tags:
      - products
    summary: 商品詳細取得
    description: 指定した商品の詳細情報を取得します。ショップ、タグ、カテゴリー、ブランド、エリア情報も含まれます。
    operationId: getProductById
    parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        description: 商品詳細
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 商品ID
                name:
                  type: string
                  description: 商品名
                categoryId:
                  type: integer
                  description: カテゴリーID
                price:
                  type: number
                  description: 価格
                image:
                  type: string
                  description: 商品画像URL
                Shop:
                  type: object
                  properties:
                    slug:
                      type: string
                      description: ショップスラッグ
                  required: [slug]
                Tags:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: タグID
                      name:
                        type: string
                        description: タグ名
                    required: [id, name]
                category:
                  type: object
                  description: カテゴリー情報
                brand:
                  type: object
                  description: ブランド情報
                area:
                  type: object
                  description: エリア情報
              required: [id, name, categoryId, price, image]
      '404':
        description: 商品が見つかりませんでした
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '商品が見つかりませんでした'
      '500':
        description: サーバーエラーが発生しました
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 'サーバーエラーが発生しました。復旧に努めてまいりますので今しばらくお待ちください'

  put:
    tags:
      - products
    summary: 商品情報更新
    description: 指定した商品の情報を更新します。更新したいフィールドのみ送信してください。
    operationId: updateProduct
    parameters:
      - name: productId
        in: path
        required: true
        description: 商品ID
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: 商品名
              description:
                type: string
                description: 商品説明
              gender:
                type: integer
                description: 性別 (1:メンズ, 2:レディース, 3:キッズ, 4:ユニセックス)
                enum: [1, 2, 3, 4]
              sizeLabel:
                type: string
                description: サイズラベル
              sizeMeasurements:
                type: string
                description: サイズ測定値
              color:
                type: integer
                description: カラー値
              condition:
                type: string
                description: 商品状態
              material:
                type: string
                description: 素材
              price:
                type: number
                minimum: 0
                description: 価格
              status:
                type: string
                description: 商品ステータス
              categoryId:
                type: integer
                description: カテゴリーID
              brandId:
                type: integer
                description: ブランドID
    responses:
      '200':
        description: 商品更新成功
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '商品の更新に成功しました！'
              required: [message]
      '400':
        description: バリデーションエラー
        content:
          application/json:
            schema:
              type: string
              example: '更新するフィールドが見つかりませんでした'
      '500':
        description: サーバーエラー
        content:
          application/json:
            schema:
              type: string
              example: '商品の更新に失敗しました'

  post:
    tags:
      - products
    summary: 商品をレジに追加（チェックアウト）
    description: 指定した商品をレジに追加します。商品の状態に応じて異なる処理を行います。
    operationId: checkoutProductAtShop
    parameters:
      - name: productId
        in: path
        required: true
        description: 商品ID
        schema:
          type: string
    responses:
      '200':
        description: 処理成功
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '../schemas/product.yaml#/components/schemas/CheckoutResponse'
                - $ref: '../schemas/product.yaml#/components/schemas/PurchaseOrderResponse'
                - $ref: '../schemas/product.yaml#/components/schemas/RentalOrderResponse'
      '400':
        description: 商品の状態エラー
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  oneOf:
                    - example: '商品はすでにレジに追加されています'
                    - example: '商品のレンタル履歴が見つかりません'
      '403':
        description: 権限エラー
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 'この商品はあなたのお店の商品ではないようです'
      '404':
        description: 商品が見つかりません
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '商品が見つかりません'
      '500':
        description: サーバーエラー
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '商品をレジに追加できませんでした'
                error:
                  type: string
                  description: エラーの詳細
