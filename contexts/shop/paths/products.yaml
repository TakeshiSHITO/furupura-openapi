/products:
  get:
    tags:
      - products
    summary: 商品一覧取得
    description: 商品一覧を取得します。キーワード、カテゴリ、ブランド、価格などでフィルタリングできます。
    operationId: getProducts
    parameters:
      - name: keyword
        in: query
        description: 検索キーワード（商品名・説明文で検索）
        schema:
          type: string
      - name: categorySlug
        in: query
        description: カテゴリースラグ
        schema:
          type: string
      - name: brandSlug
        in: query
        description: ブランドスラグ
        schema:
          type: string
      - name: minPrice
        in: query
        description: 最低価格
        schema:
          type: number
          minimum: 0
      - name: maxPrice
        in: query
        description: 最高価格
        schema:
          type: number
          minimum: 0
      - name: area
        in: query
        description: 地域
        schema:
          type: integer
      - name: gender
        in: query
        description: 性別 (1:メンズ, 2:レディース, 3:キッズ, 4:ユニセックス)
        schema:
          type: integer
          enum: [1, 2, 3, 4]
      - name: sizes
        in: query
        description: サイズラベル（カンマ区切り）
        schema:
          type: string
          example: 'S,M,L,XL'
      - name: colors
        in: query
        description: カラー値（カンマ区切り）
        schema:
          type: string
          example: '1,2,3'
      - name: condition
        in: query
        description: 商品状態
        schema:
          type: string
      - name: material
        in: query
        description: 素材
        schema:
          type: string
      - name: shopId
        in: query
        description: ショップID
        schema:
          type: integer
      - name: tag
        in: query
        description: タグID
        schema:
          type: integer
      - name: sortBy
        in: query
        description: ソート項目
        schema:
          type: string
          enum: [price, name, createdAt]
          default: createdAt
      - name: sortOrder
        in: query
        description: ソート順
        schema:
          type: string
          enum: [ASC, DESC]
          default: DESC
      - name: pageNumber
        in: query
        description: ページ番号
        schema:
          type: integer
          minimum: 1
          default: 1
    responses:
      '200':
        description: 商品一覧取得成功
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: 商品ID
                      categoryId:
                        type: integer
                        description: カテゴリーID
                      shopName:
                        type: string
                        description: ショップ名
                      shopArea:
                        type: integer
                        description: ショップ地域
                      name:
                        type: string
                        description: 商品名
                      image:
                        type: string
                        description: 商品画像URL
                      price:
                        type: number
                        description: 価格
                      Brand:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                        required: [id, name]
                      category:
                        type: object
                        description: カテゴリー情報
                    required: [id, categoryId, shopName, shopArea, name, image, price]
                meta:
                  type: object
                  properties:
                    count:
                      type: integer
                      description: 総商品数
                    currentPage:
                      type: integer
                      description: 現在のページ番号
                    pages:
                      type: integer
                      description: 総ページ数
                    pageSize:
                      type: integer
                      description: 1ページあたりの商品数
                  required: [count, currentPage, pages, pageSize]
              required: [products, meta]
      '400':
        $ref: '../../../shared/responses/common.yaml#/components/responses/BadRequest'
      '401':
        $ref: '../../../shared/responses/common.yaml#/components/responses/Unauthorized'

  post:
    tags:
      - products
    summary: 商品登録
    description: 新しい商品を登録します。指定した数だけサンプル商品を一括作成できます。
    operationId: createProduct
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: integer
                minimum: 1
                description: 作成する商品数
                example: 1
            required: [count]
    responses:
      '201':
        description: 商品作成成功
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '1件の商品が作成されました'
              required: [message]
      '400':
        description: バリデーションエラー
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '商品数は1以上で指定してください。'
      '401':
        $ref: '../../../shared/responses/common.yaml#/components/responses/Unauthorized'
      '404':
        description: 店舗が見つかりません
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '店舗が見つかりません。'
      '500':
        description: サーバーエラー
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: エラーメッセージ

  delete:
    tags:
      - products
    summary: 商品からタグを削除
    description: 指定した商品から指定したタグを削除します。
    operationId: removeTagsFromProduct
    parameters:
      - name: productId
        in: path
        required: true
        description: 商品ID
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              tagIds:
                type: array
                items:
                  type: integer
                description: 削除するタグIDのリスト
                minItems: 1
                example: [1, 2, 3]
            required: [tagIds]
    responses:
      '200':
        description: タグ削除成功
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '商品からタグを削除しました'
                tags:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: タグID
                      name:
                        type: string
                        description: タグ名
                    required: [id, name]
                  description: 商品に残っているすべてのタグ
              required: [message, tags]
      '400':
        description: バリデーションエラー
        content:
          application/json:
            schema:
              type: string
              example: 'Tags should be a non-empty array of IDs'
      '500':
        description: サーバーエラー
        content:
          application/json:
            schema:
              type: string
              example: '商品からタグを削除できませんでした'

/products/{productId}:
  get:
    tags:
      - products
    summary: 商品詳細取得
    description: 指定した商品の詳細情報を取得します。ショップ、タグ、カテゴリー、ブランド、エリア情報も含まれます。
    operationId: getProductById
    parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        description: 商品詳細
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 商品ID
                name:
                  type: string
                  description: 商品名
                categoryId:
                  type: integer
                  description: カテゴリーID
                price:
                  type: number
                  description: 価格
                image:
                  type: string
                  description: 商品画像URL
                Shop:
                  type: object
                  properties:
                    slug:
                      type: string
                      description: ショップスラッグ
                  required: [slug]
                Tags:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: タグID
                      name:
                        type: string
                        description: タグ名
                    required: [id, name]
                category:
                  type: object
                  description: カテゴリー情報
                brand:
                  type: object
                  description: ブランド情報
                area:
                  type: object
                  description: エリア情報
              required: [id, name, categoryId, price, image]
      '404':
        description: 商品が見つかりませんでした
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '商品が見つかりませんでした'
      '500':
        description: サーバーエラーが発生しました
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 'サーバーエラーが発生しました。復旧に努めてまいりますので今しばらくお待ちください'

  put:
    tags:
      - products
    summary: 商品情報更新
    description: 指定した商品の情報を更新します。更新したいフィールドのみ送信してください。
    operationId: updateProduct
    parameters:
      - name: productId
        in: path
        required: true
        description: 商品ID
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: 商品名
              description:
                type: string
                description: 商品説明
              gender:
                type: integer
                description: 性別 (1:メンズ, 2:レディース, 3:キッズ, 4:ユニセックス)
                enum: [1, 2, 3, 4]
              sizeLabel:
                type: string
                description: サイズラベル
              sizeMeasurements:
                type: string
                description: サイズ測定値
              color:
                type: integer
                description: カラー値
              condition:
                type: string
                description: 商品状態
              material:
                type: string
                description: 素材
              price:
                type: number
                minimum: 0
                description: 価格
              status:
                type: string
                description: 商品ステータス
              categoryId:
                type: integer
                description: カテゴリーID
              brandId:
                type: integer
                description: ブランドID
    responses:
      '200':
        description: 商品更新成功
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '商品の更新に成功しました！'
              required: [message]
      '400':
        description: バリデーションエラー
        content:
          application/json:
            schema:
              type: string
              example: '更新するフィールドが見つかりませんでした'
      '500':
        description: サーバーエラー
        content:
          application/json:
            schema:
              type: string
              example: '商品の更新に失敗しました'

  post:
    tags:
      - products
    summary: 商品をレジに追加（チェックアウト）
    description: 指定した商品をレジに追加します。商品の状態に応じて異なる処理を行います。
    operationId: checkoutProductAtShop
    parameters:
      - name: productId
        in: path
        required: true
        description: 商品ID
        schema:
          type: string
    responses:
      '200':
        description: 処理成功
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    message:
                      type: string
                      example: '商品をレジに追加しました！'
                    product:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: 商品ID
                        status:
                          type: string
                          description: 商品ステータス
                        name:
                          type: string
                          description: 商品名
                        price:
                          type: number
                          description: 価格
                        image:
                          type: string
                          description: 商品画像URL
                      required: [id, status, name, price, image]
                  required: [message, product]
                - type: object
                  properties:
                    message:
                      type: string
                      example: '商品への注文（購入）がオンラインで入っています。'
                    purchaseItem:
                      type: object
                      properties:
                        serviceOption:
                          type: string
                          example: 'purchase'
                      description: 購入アイテム情報
                  required: [message, purchaseItem]
                - type: object
                  properties:
                    message:
                      type: string
                      example: '商品への注文（レンタル）がオンラインで入っています。'
                    rentalItem:
                      type: object
                      properties:
                        serviceOption:
                          type: string
                          example: 'rental'
                      description: レンタルアイテム情報
                  required: [message, rentalItem]
      '400':
        description: 商品の状態エラー
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  oneOf:
                    - example: '商品はすでにレジに追加されています'
                    - example: '商品のレンタル履歴が見つかりません'
      '403':
        description: 権限エラー
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 'この商品はあなたのお店の商品ではないようです'
      '404':
        description: 商品が見つからない
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '商品が見つかりません'
      '500':
        description: サーバーエラー
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '商品をレジに追加できませんでした'
                error:
                  type: string
                  description: エラーの詳細

/products/cancel-checkout:
  post:
    tags:
      - products
    summary: 複数商品のレジ取り消し
    description: 指定した複数商品のレジ状態を取り消し、available状態に戻します。
    operationId: cancelCheckoutProductsAtShop
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              productIds:
                type: array
                items:
                  type: integer
                description: 取り消し対象の商品IDリスト
                minItems: 1
                example: [1, 2, 3]
            required: [productIds]
    responses:
      '200':
        description: レジ取り消し成功
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '商品のレジからの削除が完了しました'
              required: [message]
      '400':
        description: バリデーションエラー
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '有効な productIds の配列を提供してください'
      '404':
        description: 商品が見つからない
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '指定された商品が見つかりません'
      '500':
        description: サーバーエラー
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    message:
                      type: string
                      example: '一部の商品を更新できませんでした'
                    failedProducts:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: 商品ID
                          name:
                            type: string
                            description: 商品名
                        required: [id, name]
                      description: 更新に失敗した商品リスト
                  required: [message, failedProducts]
                - type: object
                  properties:
                    message:
                      type: string
                      example: '商品のレジからの削除に失敗しました'
                    error:
                      type: string
                      description: エラーの詳細
                  required: [message, error]

/products/shop/{shopId}:
  post:
    tags:
      - products
    summary: 管理者用商品一括作成
    description: 管理者が指定したショップに商品を一括作成します。指定した数だけサンプル商品を作成できます。
    operationId: createProductsByAdmin
    parameters:
      - name: shopId
        in: path
        required: true
        description: ショップID
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: integer
                minimum: 1
                description: 作成する商品数
                example: 1
            required: [count]
    responses:
      '201':
        description: 商品作成成功
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '1件の商品が作成されました'
              required: [message]
      '400':
        description: バリデーションエラー
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '商品数は1以上で指定してください。'
      '401':
        $ref: '../../../shared/responses/common.yaml#/components/responses/Unauthorized'
      '404':
        description: 店舗が見つかりません
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: '店舗が見つかりません。'
      '500':
        description: サーバーエラー
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: エラーメッセージ
